# -*- mode: ruby -*-
# vi: set ft=ruby :


#====================================================================
# Tony Karre @tonykarre
#
#  Environment variables used:
#    KALI_SETUP_TEMPLATE_PATH = full path to this file, e.g., c:\mypath\Vagrantfile.erb
#    KALI_SETUP_HOST_SYNCED_FOLDER_PATH = host path to the shared folder. e.g., "G:/" for a mounted virtual drive
#    KALI_SETUP_VM_SYNCED_FOLDER_PATH = kali path to the shared folder.  e.g., "/12345"
#
#
#====================================================================

# Generated from template <%= ENV["KALI_SETUP_TEMPLATE_PATH"] %>
# Generated on <%= Time.now %>
#
# Make sure your KALI_SETUP_HOST_SYNCED_FOLDER_PATH is mounted and accessible before you "vagrant up" or "vagrant destroy".
# Also make sure that if your HOST path is something like "G:/", then you
# have actually mounted the desired virtual drive on G:.
#
#     KALI_SETUP_HOST_SYNCED_FOLDER_PATH: <%= ENV["KALI_SETUP_HOST_SYNCED_FOLDER_PATH"] %>
#     KALI_SETUP_VM_SYNCED_FOLDER_PATH: <%= ENV["KALI_SETUP_VM_SYNCED_FOLDER_PATH"] %>

# The presence of KALI_SETUP_HOST_SYNCED_FOLDER_PATH/.encryptionsemaphore means that we have encrypted the VM storage.

ENCRYPTION_SEMAPHORE = "<%= ENV["KALI_SETUP_HOST_SYNCED_FOLDER_PATH"] %>.encryptionsemaphore"



# provisioning script - install additional packages, etc.

$script = <<-SCRIPT
# Sleep until locks are available
while fuser /var/{lib/{dpkg,apt/lists},cache/apt/archives}/lock >/dev/null 2>&1; do
   sleep 1
done
apt-get update
# Sleep again until locks are available
while fuser /var/{lib/{dpkg,apt/lists},cache/apt/archives}/lock >/dev/null 2>&1; do
   sleep 1
done
sudo DEBIAN_FRONTEND=noninteractive apt-get install -y exiftool rinetd jq awscli sharutils
# Create the fixnetwork script.
FIXNETWORK=/home/kali/fixnetwork.sh
echo "Setting up $FIXNETWORK to run at each reboot"
echo 'for intf in $(ip link show | grep eth.: | cut -d : -f 2) ; do' > $FIXNETWORK
echo '  if [ $(ip addr show $intf | grep inet | wc -l) -eq 0 ]; then' >> $FIXNETWORK
echo '    dhclient -1 $intf' >> $FIXNETWORK
echo '  fi' >> $FIXNETWORK
echo 'done' >> $FIXNETWORK
if [ -f $FIXNETWORK ]; then
  chmod +x $FIXNETWORK
  echo "@reboot $FIXNETWORK" >> /etc/crontab
else
   echo "Failed to create $FIXNETWORK"
fi
echo "Provisioning script completed."
SCRIPT

Vagrant.configure("2") do |config|

  config.vm.box = "<%= box_name %>"

  <% if box_version -%>
    config.vm.box_version = "<%= box_version %>"
  <% end -%>

  <% if box_url -%>
    # The url from where the 'config.vm.box' box will be fetched if it
    # doesn't already exist on the user's system.
    config.vm.box_url = "<%= box_url %>"
  <% else -%>
    # Disable automatic box update checking. If you disable this, then
    # boxes will only be checked for updates when the user runs
    # `vagrant box outdated`. This is not recommended.
    # config.vm.box_check_update = false
  <% end -%>

  # By default, the network interface is configured with NAT.  
  # With Kali, your host's endpoint protection or antivirus could potentially block incoming packages when you try to update your VM, i.e., "apt-get dist-upgrade".
  # You might need to be in bridged mode if that happens. Or maybe you just want bridged mode.
  # If so, just uncomment the following line and use vagrant to restart the box (after you've done your first "vagrant up").

  #config.vm.network "public_network", use_dhcp_assigned_default_route: true

  # But before we continue, here's a quick word on the consequences of adding the public network.
  # In my testing, if you simply choose the default NAT network, you get a single "eth0" adapter.
  # When viewed from ifconfig, the network likely looks like this:
  #
  # root@kali:~# ifconfig
  # eth0: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
  #         inet 10.0.2.15  netmask 255.255.255.0  broadcast 10.0.2.255
  #         inet6 fe80::a00:27ff:fed1:a9ac  prefixlen 64  scopeid 0x20<link>
  #         ether 08:00:27:d1:a9:ac  txqueuelen 1000  (Ethernet)
  #         RX packets 349  bytes 42853 (41.8 KiB)
  #         RX errors 0  dropped 0  overruns 0  frame 0
  #         TX packets 273  bytes 48901 (47.7 KiB)
  #         TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0
  # 
  # lo: flags=73<UP,LOOPBACK,RUNNING>  mtu 65536
  #         inet 127.0.0.1  netmask 255.0.0.0
  #         inet6 ::1  prefixlen 128  scopeid 0x10<host>
  #         loop  txqueuelen 1000  (Local Loopback)
  #         RX packets 6  bytes 318 (318.0 B)
  #         RX errors 0  dropped 0  overruns 0  frame 0
  #         TX packets 6  bytes 318 (318.0 B)
  #         TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0
  #
  # But, if you add the public network by uncommenting the config.vm.network line above, 
  # you end up with two network adapters.  You still get "eth0" for the NAT interface, but you
  # then get a second "eth1" interface that is for your bridged network.
  # Again, in my testing, sometimes the original NAT (eth0) interface fails to get an IP.
  # When that happens, the "Vagrant Up" boot process appears to fail, because "Vagrant ssh" can't connect through
  # your host loopback connector to the box.  The box boots OK, but Vagrant doesn't know it because
  # "vagrant ssh" fails and it can't talk to the box.  If you do an ifconfig, it looks like this:
  #
  # root@kali:~# ifconfig
  # eth0: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
  #         ether 08:00:27:d1:a9:ac  txqueuelen 1000  (Ethernet)
  #         RX packets 567  bytes 67894 (66.3 KiB)
  #         RX errors 0  dropped 0  overruns 0  frame 0
  #         TX packets 429  bytes 76738 (74.9 KiB)
  #         TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0
  # 
  # eth1: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
  #         inet 10.3.42.27  netmask 255.255.255.0  broadcast 10.3.42.255
  #         inet6 fe80::a00:27ff:fefa:4d92  prefixlen 64  scopeid 0x20<link>
  #         ether 08:00:27:fa:4d:92  txqueuelen 1000  (Ethernet)
  #         RX packets 33  bytes 8887 (8.6 KiB)
  #         RX errors 0  dropped 0  overruns 0  frame 0
  #         TX packets 46  bytes 5323 (5.1 KiB)
  #         TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0
  # 
  # lo: flags=73<UP,LOOPBACK,RUNNING>  mtu 65536
  #         inet 127.0.0.1  netmask 255.0.0.0
  #         inet6 ::1  prefixlen 128  scopeid 0x10<host>
  #         loop  txqueuelen 1000  (Local Loopback)
  #         RX packets 10  bytes 474 (474.0 B)
  #         RX errors 0  dropped 0  overruns 0  frame 0
  #         TX packets 10  bytes 474 (474.0 B)                                     
  #         TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0                  
  #
  # You can still manually ssh into the box through
  # the bridge interface, but "vagrant ssh" doesn't use that.
  #
  # A workaround is to run this:
  #  dhclient -1 eth0
  #
  # That will get an IP for eth0 and all is fine.  To automatically implement that,
  # the provisioning script seen up above adds a line to the /etc/crontab file to run at boot time.
  # If any interface starting with "eth" is missing an IP address, we'll try to get one with the dhclient command.
  # The script we create during provisioning is /home/kali/fixnetwork.sh
  #


  config.trigger.before :up do |trigger|

    trigger.ruby do |env|

      # if the ENCRYPTION_SEMAPHORE file exists, then we have encrypted the VM storage device.
      # Print a message to warn the user that they will need to supply a password as the box comes up.

      if File.exists?(ENCRYPTION_SEMAPHORE)

        puts ""
        puts "The VM is encrypted - watch the Virtualbox window as the box comes up. It will pause and ask for your password."
        puts ""

      end

    end

  end
  
  config.vm.synced_folder "<%= ENV["KALI_SETUP_HOST_SYNCED_FOLDER_PATH"] %>", "<%= ENV["KALI_SETUP_VM_SYNCED_FOLDER_PATH"] %>"
  config.vm.synced_folder ".", "/vagrant", disabled: true
  
  config.vm.provider "virtualbox" do |vb|
    vb.gui = true
    vb.memory = "4096"
    vb.cpus = 2
     
    # Kali 2019.4 does not seem to work well with VirtualBox 3D acceleration, which is the default.
    # Customize the VM to select VMSVGA and disable 3D acceleration.
     
    vb.customize ["modifyvm", :id, "--graphicscontroller", "VMSVGA"]
    vb.customize ["modifyvm", :id, "--accelerate3d", "off"]

  end

  config.vm.provision "shell", inline: $script

end
